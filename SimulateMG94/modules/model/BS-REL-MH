RequireVersion ("2.5.37");

LoadFunctionLibrary("libv3/all-terms.bf");
LoadFunctionLibrary("libv3/UtilityFunctions.bf");
LoadFunctionLibrary("libv3/models/parameters.bf");
LoadFunctionLibrary("libv3/models/codon/BS_REL.bf");


KeywordArgument ("omegas", "Omega value distribution, specified as a comma-separated string omega1,weight1,omega2,weight2,...,omegaN,weightN (weights will be normalized to sum to 1)", "1,1");
simulator.bs_rel.omega  = Eval ("{{" + io.PromptUserForString ("Omega distribution specification") + "}}");


simulator.omega_classes = utility.Array1D (simulator.bs_rel.omega) $ 2;

if (simulator.omega_classes >= 1 && utility.Array1D (simulator.bs_rel.omega) % 2 == 0) {
    simulator.bs_rel.omega = {simulator.omega_classes,2}["simulator.bs_rel.omega[_MATRIX_ELEMENT_ROW_* 2+_MATRIX_ELEMENT_COLUMN_]"];
    simulator.bs_rel.norm = 1/(+simulator.bs_rel.omega[-1][1]);
    for (simulator.i = 0; simulator.i < simulator.omega_classes; simulator.i += 1) {
        simulator.bs_rel.omega[simulator.i][1] = simulator.bs_rel.omega[simulator.i][1] * simulator.bs_rel.norm;
    }
    console.log (">Omega distribution used for the simulator (omega, weight)\n" + simulator.bs_rel.omega);

 } else {
    io.ReportAnExecutionError ("Incorrect dimensions for the omega distribution specification (even number comma-separated terms with at least two terms)");
 }
 
KeywordArgument ("delta", "Instantaneous rate for double-hits", "0.1");
simulator.delta = "" + io.PromptUser ("Instantaneous rate for double-hit subs", 0.1, 0, 1e3, FALSE); 
KeywordArgument ("psi", "Instantaneous rate for triple-hits", "0.0");
simulator.psi = "" + io.PromptUser ("Instantaneous rate for triple-hit subs", 0.0, 0, 1e3, FALSE); 
KeywordArgument ("psi-islands", "Instantaneous rate for triple-hits in synonymous islands", "0.0");
simulator.psi_islands = "" + io.PromptUser ("Instantaneous rate for triple-hits in synonymous islands", 0.00, 0, 1e3, FALSE); 

simulator.report = {
    terms.parameters.multiple_hit_rate : simulator.delta,
    terms.parameters.triple_hit_rate : simulator.psi,
    terms.parameters.triple_hit_rate_syn : simulator.psi_islands,
    terms.parameters.omega : simulator.bs_rel.omega
};

              
//----------------------------------------------------------------------------------------

lfunction simulator.define_model.frequencies (type,code,rate_classes) {
    model = Call ("models.codon.BS_REL_Per_Branch_Mixing.MH.ModelDescription", type, code,rate_classes);
    if (^"simulator.frequency_type" == "F3x4") {
        model[utility.getGlobalValue("terms.model.frequency_estimator")] = "frequencies.empirical.F3x4";
    } else {
        if (^"simulator.frequency_type" == "F1x4") {
            model[utility.getGlobalValue("terms.model.frequency_estimator")] = "frequencies.empirical.F1x4";
        }
    }
    model [^"terms.efv_estimate"] = ^"simulator.efv";

    return model;
}

//----------------------------------------------------------------------------------------


function simulator.define_model (code) {
    simulation.model = model.generic.DefineMixtureModel ("simulator.define_model.frequencies" ,
                                                  "simulator.substitution_model",
                                                  {"0" : parameters.Quote(terms.local),
                                                  "1" : code,
                                                  "2" : simulator.omega_classes},
                                                  null,
                                                  null);
                                                  
                   
    simulation.model.omegas = models.codon.BS_REL.ExtractMixtureDistribution(simulation.model);
    //parameters.SetStickBreakingDistribution (simulation.model.omegas, simulator.bs_rel.omega);
    
    //console.log (simulation.model);
                               
    return simulation.model;
}
